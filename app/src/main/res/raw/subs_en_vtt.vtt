WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.030
Hi, I'm Nic and today we're
going to be showing you how to

00:00:03.030 --> 00:00:07.290
resolve WCAG name role value
violations on Android devices.

00:00:15.570 --> 00:00:19.740
So WCAG 4.1.2
defines the name role value

00:00:19.740 --> 00:00:23.130
violations. And it states that
for all user interface

00:00:23.130 --> 00:00:26.670
components, the name and role
must be able to be determined

00:00:26.670 --> 00:00:30.330
programmatically, and the states
properties and values of these

00:00:30.330 --> 00:00:33.960
objects must be able to be set
programmatically. The intent of

00:00:33.960 --> 00:00:37.080
the success criterion is to be
sure that assistive technologies

00:00:37.080 --> 00:00:40.080
such as screen readers can
gather information, set

00:00:40.080 --> 00:00:43.170
information and keep up to date
with the current state of the

00:00:43.170 --> 00:00:46.230
users interface. For more
details on the specifics of

00:00:46.230 --> 00:00:49.140
WCAG name role value
violations, check out this link

00:00:49.140 --> 00:00:51.990
here, Link also in the
description below. Let's go

00:00:51.990 --> 00:00:55.110
ahead and fix the name role
value violation with the help of

00:00:55.110 --> 00:00:58.770
the mesmer JetBrains plugin. But
first, don't forget to like and

00:00:58.770 --> 00:01:05.490
subscribe to the YouTube
algorithm. So here we have two

00:01:05.940 --> 00:01:08.310
name role value violations
brought up by the mesmer

00:01:08.310 --> 00:01:12.090
assistant, we can click on the
resource ID to find the Java

00:01:12.120 --> 00:01:15.180
kotlin files and XML file is
responsible for these

00:01:15.180 --> 00:01:19.500
violations. So we'll go ahead
and open up these files. And

00:01:19.500 --> 00:01:24.030
there we go. So here we have the
XML file. So let's now that we

00:01:24.030 --> 00:01:27.000
know its screen the violations
are on, let's go ahead and bring

00:01:27.000 --> 00:01:30.180
up our emulator and see if we
can identify the violation for

00:01:30.180 --> 00:01:33.510
ourselves and see what's going
on. So here we have the emulator

00:01:33.510 --> 00:01:36.780
of the screen. Let's go and see
what our screen reader is able

00:01:36.780 --> 00:01:38.760
to see. So we can figure out
what's going on with the

00:01:38.760 --> 00:01:39.300
violation.

00:01:40.170 --> 00:01:43.770
I agree to the mesmer Terms of
Service and privacy policy,

00:01:44.460 --> 00:01:47.520
double tap to activate double
tap and hold to long press.

00:01:49.380 --> 00:01:52.530
OK, so it's not giving me any
feedback when I double tap, it's

00:01:52.530 --> 00:01:52.770
not

00:01:52.770 --> 00:01:55.860
checked checkbox. Double tap to
toggle.

00:01:56.190 --> 00:01:59.580
Notice the screen reader is
unable to associate the checkbox

00:01:59.580 --> 00:02:04.650
with its description. Let's go
ahead and fix that. So from

00:02:04.650 --> 00:02:07.770
within here, we can see that
there are two separate objects

00:02:07.770 --> 00:02:11.850
from the check box and TextView.
And in the kotlin file, it looks

00:02:11.850 --> 00:02:15.930
like we are just binding the
click to associate the text box

00:02:15.930 --> 00:02:19.950
with that check view. That's why
we're able to click here on this

00:02:20.100 --> 00:02:23.760
and still get the checkbox
checked. So we'll go ahead and

00:02:23.760 --> 00:02:26.670
take care of that. Easiest way
to do this is going to be

00:02:26.670 --> 00:02:29.940
associate both of these with a
single object. So we're going to

00:02:29.940 --> 00:02:33.060
want to copy over the text from
the TextView and put it in the

00:02:33.060 --> 00:02:35.940
checkbox. We no longer need the
TextView because we're going to

00:02:35.940 --> 00:02:38.430
program this with a single
object, we're going to need to

00:02:38.430 --> 00:02:43.410
make sure and set the width for
this new object. Okay, looking

00:02:43.410 --> 00:02:45.960
good. And here. Alright, now
what do we need to modify for

00:02:45.960 --> 00:02:48.000
the kotlin we no longer need
this finding because we're

00:02:48.000 --> 00:02:50.820
combining into a single object.
It looks like here's where we're

00:02:50.820 --> 00:02:54.720
getting our HTML. Let's go and
set that checkbox alone. And

00:02:54.720 --> 00:02:57.090
then go ahead and rerun this
application and see what it

00:02:57.090 --> 00:03:02.280
looks like now. Awesome, let's
check out how this function is

00:03:03.000 --> 00:03:05.850
not checked. I agree to the
mesmer Terms of Service and

00:03:05.850 --> 00:03:07.770
privacy policy checkbox.

00:03:08.190 --> 00:03:10.770
Awesome. So now it looks like
the checkbox and description are

00:03:10.770 --> 00:03:13.620
associated. We can tell this by
double click on the description

00:03:13.620 --> 00:03:16.410
and hearing the feedback we get
from the assistive technology

00:03:17.160 --> 00:03:20.340
checked. I agree to the mesmer
Terms of Service and privacy

00:03:20.340 --> 00:03:23.910
policy checkbox. And just like
that, we've resolved our name

00:03:23.910 --> 00:03:26.160
role value accessibility
violation.

00:03:26.760 --> 00:03:29.820
Which accessibility violation do
you think is the most difficult

00:03:29.820 --> 00:03:32.190
to resolve? Let us know in the
comment section down below.

00:03:32.430 --> 00:03:33.390
Happy developing

